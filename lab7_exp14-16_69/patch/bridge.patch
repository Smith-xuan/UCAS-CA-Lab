--- D:\国科大通知\体系结构实验\lab7_exp16_69\mycup1\bridge.v
+++ D:\国科大通知\体系结构实验\lab7_exp16_69\myCPU\bridge.v
@@ -1,7 +1,6 @@
 `define DATA_ID 4'h1
 `define INST_ID 4'h0
-`define I_BUF_WD 32
-`define D_BUF_WD 71
+
 
 module sram_to_axi_bridge(
     input  wire     aclk,
@@ -86,57 +85,18 @@
 assign wid      = 4'b0001;
 assign wlast    = 1;
 
-/*
-wire        inst_req_wen;
-wire        inst_req_ren;
-wire        inst_req_empty;
-wire        inst_req_full;
-wire [31:0] inst_req_input;
-wire [31:0] inst_req_output;
-
-wire        data_req_wen;
-wire        data_req_ren;
-wire        data_req_empty;
-wire        data_req_full;
-wire [31:0] data_req_input;
-wire [31:0] data_req_output;
-
-//inst_req_buffer
-fifo_buffer #(
-    .DATA_WIDTH     (32),
-    .BUFF_DEPTH     (6),
-    .ADDR_WIDTH     (3)
-) inst_req_buff (
-    .clk            (aclk),
-    .reset          (areset),
-    .wen            (inst_req_wen),
-    .ren            (inst_req_ren),
-    .empty          (inst_req_empty),
-    .full           (inst_req_full),
-    .data_in        (inst_req_input),
-    .data_out       (inst_req_output)
-);
-
-//data_req_buffer
-fifo_buffer #(
-    .DATA_WIDTH     (32),
-    .BUFF_DEPTH     (6),
-    .ADDR_WIDTH     (3)
-) data_req_buff (
-    .clk            (aclk),
-    .reset          (areset),
-    .wen            (data_req_wen),
-    .ren            (data_req_ren),
-    .empty          (data_req_empty),
-    .full           (data_req_full),
-    .data_in        (data_req_input),
-    .data_out       (data_req_output)
-);
-*/
 reg         arvalid_r;
 reg [3 :0]  arid_r;
 reg [2 :0]  arsize_r;
 reg [31:0]  araddr_r;
+
+reg [31:0] araddr_buff;
+reg [2 :0] arsize_buff;
+reg ar_buff_valid;
+
+reg [31:0] araddr_wfr;//waiting for read
+reg [2 :0] arsize_wfr;
+reg ar_wfr_valid;
 
 wire axi_rreq;
 wire axi_read_from_data;
@@ -153,8 +113,10 @@
 assign axi_rreq = inst_sram_req && !inst_sram_wr || data_sram_req && !data_sram_wr;
 assign axi_read_from_data = data_sram_req && !data_sram_wr && arid_r != 4'b0000;
 assign rreq_id = axi_read_from_data ? `DATA_ID : `INST_ID;
-assign rreq_size = axi_read_from_data ? data_sram_size : inst_sram_size;
-assign rreq_addr = axi_read_from_data ? data_sram_addr : inst_sram_addr;
+assign rreq_size = axi_read_from_data ? data_sram_size :
+                     ar_buff_valid ? arsize_buff : inst_sram_size;
+assign rreq_addr = axi_read_from_data ? data_sram_addr :
+                     ar_buff_valid ? araddr_buff : inst_sram_addr;
 
 always @(posedge aclk)begin
     if(areset)begin
@@ -162,7 +124,7 @@
         arid_r    <= 4'b0010;
         arsize_r  <= 3'h0;
         araddr_r  <= 32'h0;
-    end else if(!arvalid_r && axi_rreq && write_finish)begin
+    end else if(!arvalid_r && (axi_rreq || ar_buff_valid) && write_finish)begin
         arvalid_r <= 1'b1;
         arid_r    <= rreq_id;
         arsize_r  <= rreq_size;
@@ -172,6 +134,23 @@
         arid_r    <= 4'b0010;
         arsize_r  <= 3'h0;
         araddr_r  <= 32'h0;
+    end
+end
+
+//waiting for write
+always @(posedge aclk)begin
+    if(areset)begin
+        ar_buff_valid <= 1'b0;
+        arsize_buff  <= 3'h0;
+        araddr_buff  <= 32'h0;
+    end else if(!ar_buff_valid && !arvalid_r && inst_sram_req && !write_finish )begin
+        ar_buff_valid <= 1'b1;
+        arsize_buff  <= inst_sram_size;
+        araddr_buff  <= inst_sram_addr;
+    end else if(ar_buff_valid && write_finish && !axi_read_from_data && !arvalid_r)begin
+        ar_buff_valid <= 1'b0;
+        arsize_buff  <= 3'h0;
+        araddr_buff  <= 32'h0;
     end
 end
 

